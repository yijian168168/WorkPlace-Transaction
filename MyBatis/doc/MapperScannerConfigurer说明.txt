1、 要创建 MapperScannerConfigurer,可以在 Spring 的配置中添加如下代码:
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="org.mybatis.spring.sample.mapper" />
        </bean>
2、  basePackage 属性是让你为映射器接口文件设置基本的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径。
     每个映射器将会在指定的包路径中递归地被搜索到。
     注 意 , 没 有 必 要 去 指 定 SqlSessionFactory 或 SqlSessionTemplate ,
     因 为 MapperScannerConfigurer 将会创建 MapperFactoryBean,之后自动装配。
     但是,如果你使 用了一个 以上的 DataSource ,那 么自动 装配可 能会失效 。
     这种 情况下 ,你可 以使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName 属性来设置正确的 bean 名 称来使用。
     这就是它如何来配置的,注意 bean 的名称是必须的,而不是 bean 的引用,因 此,value 属性在这里替代通常的 ref:
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="org.mybatis.spring.sample.mapper" />
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        </bean>

3、 MapperScannerConfigurer 支 持 过 滤 由 指 定 的 创 建 接 口 或 注 解 创 建 映 射 器 。
    annotationClass 属性指定了要寻找的注解名称。 markerInterface 属性指定了要寻找的父 接口。
    如果两者都被指定了,加入到接口中的映射器会匹配两种标准。
    默认情况下,这两个 属性都是 null,所以在基包中给定的所有接口可以作为映射器加载。
    被发现的映射器将会使用 Spring 对自动侦测组件(参考 Spring 手册的 3.14.4)默认的命 名策略来命名。
    也就是说,如果没有发现注解,它就会使用映射器的非大写的非完全限定类 名。
    但是如果发现了@Component 或 JSR-330 的@Named 注解,它会获取名称。
    注意你可以 配 置 到 org.springframework.stereotype.Component ,
    javax.inject.Named(如果你使用 JSE 6 的话)或你自己的注解(肯定是自我注解)中,这 样注解将会用作生成器和名称提供器。
